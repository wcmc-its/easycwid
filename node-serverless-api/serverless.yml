service: cornell-cwid-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local
custom:
  dynamodb:
      stages:
        - test
        - dev
      start:
        port: 8000
        inMemory: true
        migrate: true
      migration:
        dir: offline/migrations
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
    
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 1
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  # Load our secret environment variables based on the current stage.
  # Fallback to default if it is not in prod.
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    DYNAMODB_TABLE: ${opt:stage, self:provider.stage}-cwid-records

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/*"

functions:
  create:
    handler: api/create.main
    events:
      - http:
          path: records
          method: post
          cors: true
          # authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /records/{id}
    # - method: GET request
    handler: api/get.main
    events:
      - http:
          path: records/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    # Defines an HTTP API endpoint that calls the main function in list_cluster.js
    # - path: url path is /records
    # - method: GET request
    handler: api/list.main
    events:
      - http:
          path: records/clusters/{clusterId}
          method: get
          cors: true
          authorizer: aws_iam

  list_by_cwid:
    # Defines an HTTP API endpoint that calls the main function in list_cluster.js
    # - path: url path is /records
    # - method: GET request
    handler: api/list_by_cwid.main
    events:
      - http:
          path: records/cwid/{cwid}
          method: get
          cors: true
          authorizer: aws_iam

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /records/{id}
    # - method: DELETE request
    handler: api/delete.main
    events:
      - http:
          path: records/{id}
          method: delete
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
